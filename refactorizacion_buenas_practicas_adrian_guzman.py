# -*- coding: utf-8 -*-
"""refactorizacion_buenas_practicas_Adrian_Guzman.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10nuGLdwgEZ01w_8Vk9ny7pTOBZuTJcAj

# 5 - Quiz práctico de código limpio

### 5.1 Clasificando imagenes
Pensemos en un programa que realiza alguna operación, por ejemplo, clasificar una imagen. El código de abajo es una representación del código.

**¿Qué podría cambiar para hacer el código mas limpio?**
"""

import time

i = "path_image"

t = end_time - start # calcula el tiempo de ejecucion
c = classify(i) # obtiene la clase de la imagen
print("La duracion fue de {} segundos. La clase es {}".format(t, c))

"""**Solucion**
* Colocar nombres de variables mas descriptivas y dando nombres significativos
* Eliminando los comentarios ya que el codigo se explica solo con los nombres de variables que colocamos
* limitar lineas de 79 caracteres|
"""

import time

image_path = "path_image"
execution_time = end_time - start
classification = classify(image_path)

print(f"La duración fue de {execution_time} segundos. "

"""### 5.2 Compra de criptomonedas
Imagina que has creado un bot para comprar criptomonedas automaticamente. Este bot te ayuda a calcular el precio ideal, o precio limite en el cual tu decides comprar cada moneda. El funcionamiento de tu programa es sencillo: iteras cada una de las criptomonedas y el programa compra si el precio es menor o igual que el limite calculado. Si no cumple con la condicion, lo dejas en la lista de espera.

**¿Cuál de los siguiente pedazos de código es el mas limpio?**
"""

# Opcion A
crypto_limit_prices = {'BTC': 44000, 'ETH': 31000, 'BNB': 410}
for crypto_ticker, crypto_limit_price in buy_prices.items():
    if crypto_limit_price <= get_current_crypto_price(ticker):
        buy_crypto(ticker)
    else:
        watchlist_crypto(ticker)

# Opcion B
prices = {'BTC': 44000, 'ETH': 31000, 'BNB': 410}
for ticker, price in prices.items():
    if price <= current_price(ticker):
        buy(ticker)
    else:
        watchlist(ticker)

# Opcion C
limit_prices = {'BTC': 44000, 'ETH': 31000, 'BNB': 410}
for ticker, limit in limit_prices.items():
    if limit <= get_current_price(ticker):
        buy(ticker)
    else:
        watchlist(ticker)

"""**Opcion C**

* Debido a que tiene los nombres de variables descriptivas pero concisas a diferencia de la opcion A
* Explica que el precio es un limite
* Se limita a menos de 79 caracteres por linea

# 7 - Quiz practico de codigo limpio y modular
En este ejercicio, se debe refactorizar el código que analiza un conjunto de datos de absentismo en el trabajo [aqui](https://archive.ics.uci.edu/ml/datasets/Absenteeism+at+work). Cada fila contiene datos sobre una muestra de absentismo.

El código de este cuaderno primero cambia el nombre de las columnas del conjunto de datos.

¿Puede refactorizar este código para hacerlo más limpio y modular?
"""

import pandas as pd
df = pd.read_csv('/content/Absenteeism_at_work.csv', sep=';')
df.head()

"""## 7.1 - Renombrando columnas
El objetivo es convertir las columnas en minúsculas y reemplazar los espacios en blanco o caracteres extraños en las etiquetas de las columnas con guiones bajos.
"""

new_df = df.rename(columns={'ID': 'id',
                            'Reason for absence': 'reason_for_absence',
                            'Month of absence': 'month_of_absence',
                            'Day of the week': 'day_of_the_week',
                            'Seasons': 'seasons',
                            'Transportation expense': 'transportation_expense',
                            'Distance from Residence to Work': 'distance_from_residence_to_work',
                            'Service time': 'service_time',
                            'Age': 'age',
                            'Work load Average/day ': 'work_load_average/day_',
                            'Hit target': 'hit_target',
                            'Disciplinary failure': 'disciplinary_failure',
                            'Education': 'education',
                            'Son': 'son',
                            'Social drinker': 'social_drinker',
                            'Social smoker': 'social_smoker',
                            'Pet': 'pet',
                            'Weight': 'weight',
                            'Height': 'height',
                            'Body mass index': 'body_mass_index',
                            'Absenteeism time in hours': 'absenteeism_time_in_hours'
                            })
new_df.head()

#Refactorized

def rename_columns(df):
    new_columns = {}
    for column in df.columns:
        new_column = column.lower().replace(' ', '_')
        new_columns[column] = new_column
    return df.rename(columns=new_columns)

new_df = rename_columns(df)
new_df.head()

"""Esta es otra forma un poco mejor que evita que se tengan problemas con letras o errores tipograficos."""

labels = list(df.columns)
labels[0] = labels[0].replace(' ', '_').lower()
labels[1] = labels[1].replace(' ', '_').lower()
labels[2] = labels[2].replace(' ', '_').lower()
labels[3] = labels[3].replace(' ', '_').lower()
labels[5] = labels[5].replace(' ', '_').lower()
labels[6] = labels[6].replace(' ', '_').lower()
labels[7] = labels[7].replace(' ', '_').lower()
labels[8] = labels[8].replace(' ', '_').lower()
labels[9] = labels[9].replace(' ', '_').lower()
labels[10] = labels[10].replace(' ', '_').lower()
labels[11] = labels[11].replace(' ', '_').lower()
labels[12] = labels[12].replace(' ', '_').lower()
labels[13] = labels[13].replace(' ', '_').lower()
labels[14] = labels[14].replace(' ', '_').lower()
labels[15] = labels[15].replace(' ', '_').lower()
labels[16] = labels[16].replace(' ', '_').lower()
labels[17] = labels[17].replace(' ', '_').lower()
labels[18] = labels[18].replace(' ', '_').lower()
labels[19] = labels[19].replace(' ', '_').lower()
labels[20] = labels[20].replace(' ', '_').lower()

df.columns = labels

df.head()

#Refactorized

labels = [label.replace(' ', '_').lower() for label in df.columns]
df.columns = labels
df.head()